// OBSERVER
//
//
//
package code;

import java.util.ArrayList;
import java.util.List;

public class Observer {
    public static void main(String[] args) {

        FileSystem fileSystem = new FileSystem(10);
        FileSystemMonitor monitor = new FileSystemMonitor(fileSystem);

        fileSystem.setFiles(20);
        fileSystem.setFiles(30);

    }
}

interface FileSystemObserver {
    void update();
}

interface FileSystemObservable {
    void addObserver(FileSystemObserver observer);

    void removeObserver(FileSystemObserver observer);

    void notifyObservers();

    int getFiles();
}

class FileSystemMonitor implements FileSystemObserver {
    private FileSystemObservable fileSystem;

    public FileSystemMonitor(FileSystemObservable fileSystem) {
        this.fileSystem = fileSystem;
        this.fileSystem.addObserver(this);
    }

    @Override
    public void update() {
        System.out.println("Number of files changed to: " + fileSystem.getFiles());
    }
}

class FileSystem implements FileSystemObservable {
    private int files;
    private List<FileSystemObserver> observers = new ArrayList<>();

    public FileSystem(int files) {
        this.files = files;
    }

    public int getFiles() {
        return files;
    }

    public void setFiles(int files) {
        this.files = files;
        notifyObservers();
    }

    @Override
    public void addObserver(FileSystemObserver observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(FileSystemObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (FileSystemObserver observer : observers) {
            observer.update();
        }
    }
}

// VISITOR
//
//
//
package code;

public class Visitor {
    public static void main(String[] args) {
        Website[] sites = {
                new NormalSite("www.github.com"),
                new CloudflaredSite("www.google.com"),
        };

        WebsiteVisitor visitor = new SiteVisitor();

        for (Website site : sites) {
            site.accept(visitor);
        }
    }
}

interface WebsiteVisitor {

    void visit(NormalSite site);

    void visit(CloudflaredSite site);

}

class SiteVisitor implements WebsiteVisitor {

    @Override
    public void visit(NormalSite site) {
        System.out.println("Visiting site " + site.getName() + ", no verification needed");
    }

    @Override
    public void visit(CloudflaredSite site) {
        System.out.println("Visiting Cloudflare protected site " + site.getName() + ", bypassing Cloudflare...");
    }
}

abstract class Website {

    private String name;

    public Website(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public abstract void accept(WebsiteVisitor visitor);
}

class NormalSite extends Website {

    public NormalSite(String name) {
        super(name);
    }

    @Override
    public void accept(WebsiteVisitor visitor) {
        visitor.visit(this);
    }
}

class CloudflaredSite extends Website {

    public CloudflaredSite(String name) {
        super(name);
    }

    @Override
    public void accept(WebsiteVisitor visitor) {
        visitor.visit(this);
    }
}

// ABSTRACT CLASS 
//
//
package code;

public class AbstractClass {

    public static void main(String[] args) {

        ChessPiece king = new ChessPieceKing("white", 0, 0);
        ChessPiece rook = new ChessPieceRook("black", 0, 0);

        king.getMove();
        rook.getMove();

    }
}

abstract class ChessPiece {
    private String color;
    private int x, y;

    public ChessPiece(String color, int x, int y) {
        this.color = color;
        this.x = x;
        this.y = y;
    }

    public String getColor() {
        return color;
    }

    public void getMove() {
        System.out.println(color + ": " + move());
    }

    // abstract method, every subclass moves differently
    protected abstract String move();
}

class ChessPieceKing extends ChessPiece {

    public ChessPieceKing(String color, int x, int y) {
        super(color, x, y);
    }

    @Override
    protected String move() {
        return ("King moves one square in any direction");
    }
}

class ChessPieceRook extends ChessPiece {

    public ChessPieceRook(String color, int x, int y) {
        super(color, x, y);
    }

    @Override
    protected String move() {
        return ("Rook moves any number of squares in a horizontal or vertical direction");
    }
}